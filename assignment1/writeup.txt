Website runs on AWS EC2:
    To implement this I created an EC2 instance using Amazon's AWS. I changed the security to only allow my own IP (localhost) to SSH into the instance, but allow others to access the public DNS and view the hosted webpage. To set it up I SSHed into the EC2 instance, switched to the root directory/user, and downloaded apache through terminal commands. Once this was done I changed the permissions of the folder(s) that would contain my webpage files to allow me to write to them. Then, I uploaded my webpage files into the appropriate directory to host my NBA stats webpage.
    
Website written with PHP & MySQL - PHP best practices & OOP!:
    To implement this I used PHP to write the server side functions that would run on the EC2 instance. To connect to the database I used PDO and used PDO's quote function to prevent MySQL query injections from user input. I kept PHP and HTML seperate from each other when possible. I programmed using OOP by creating a Player class that would store the resulting player's name and stats. I then stored the player objects into an array that could be processed and outputted on the webpage. Once the results were retrieved from the database I processed it in the EC2 instance by sorting by most played games. I created a PHP function that would create HTML output using the player data from the array. This function is called inside of the HTML and displays the player's stats.
    
Data is hosted on AWS RDS:
    To implement this I created an AWS RDS instance and connected to it using XAMPP's phpmyadmin. I made changes to the phpmyadmin config file to allow me to connect directly to my AWS RDS. I also made changes to the nba stats csv file to ensure that the formatting would work with my web site and database (removed spaces, misc symbols). From phpmyadmin I created a MySQL table using SQL queries and set the index and primary key to the name column to provide faster querying. To fill the table with player data I imported the nba stats csv file into the table using phpmyadmin's import feature.
    
Website works - searching for player name works!
    To implement this I included an input form on the webpage that takes user input and sends the request to the php portion of the website. The input is processed in the php file and ultimately used to populate the webpage with player data. Users can search for either first name, last name, or the entire name. To do this I included three conditions to the SQL query, one for each case. Multiple players may be returned for a certain name, so I created an array that would store all of the possible results and output them all on the webpage.